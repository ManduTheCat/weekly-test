import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

public class P16637 {

    static int ans = Integer.MIN_VALUE;
    static List<Integer> num = new ArrayList<>();
    static List<Character> ope = new ArrayList<>();

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());

        String str = br.readLine();

        for(int i = 0; i < n; i++) {    // 연산자와 숫자 분리 저장
            char c = str.charAt(i);
            if(c == '-' || c == '+' || c == '*') {
                ope.add(c);
            }else {
                num.add(c - '0');
            }
        }

        dfs(0, num.get(0));
        System.out.println(ans);

    }

    static void dfs(int index, int sum) {   // dfs 시작
        if(index >= ope.size()){    // 연산자를 모두 사용하면 합산한 값 비교우 ans저장 후 종료
            ans = Math.max(ans, sum);
            return;
        }

        int temp = calc(ope.get(index), sum, num.get(index + 1));   // 괄호가 없는 경우 바로 연산
        dfs(index + 1, temp);

        if(index + 1 < ope.size()){ // 괄호가 있는 경우 
            int tem = calc(ope.get(index + 1), num.get(index + 1), num.get(index + 2)); // 괄호 먼저 계산
            dfs(index + 2, calc(ope.get(index), sum, tem)); // 괄호안을 계산한 값과 현재까지 합한 값 연산
        }

    }

    static int calc(char op, int x, int y) {    // 입력받은 연산자로 연산
        switch(op){
            case '-' :
                return x - y;
            case '+':
                return x + y;
            case '*':
                return x * y;
        }
        return 0;
    }

}
