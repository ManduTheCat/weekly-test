package baekjoon;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class BJ_4179_불 {
    
    static class Point {
        int x;
        int y;
        int cnt;

        public Point(int x, int y, int cnt) {
            this.x = x;
            this.y = y;
            this.cnt = cnt;
        }
    }

    static Queue<Point> qP, qF;
    static int R, C, ans;
    static int[] dx = {0, 1, 0, -1};
    static int[] dy = {1, 0, -1, 0};
    static char[][] map;


    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());

        map = new char[R][C];

        qP = new ArrayDeque<>();
        qF = new ArrayDeque<>();

        for (int i = 0; i < R; i++) {
            map[i] = br.readLine().toCharArray();
            for (int j = 0; j < C; j++) {
                if (map[i][j] == 'J') {
                    qP.add(new Point(i, j, 0));
                }
                if (map[i][j] == 'F') {
                    qF.add(new Point(i, j, 0));
                }
            }
        }

        if (bfs()) {  // 탈출을 성공하면 걸린 시간 출력
            System.out.println(ans); 
        } else {  // 탈출을 성공하지 못하면 IMPOSSIBLE 출력
            System.out.println("IMPOSSIBLE");
        }



    }

    static boolean bfs() {
        while (!qP.isEmpty()) {
            // 불 이동
            // 현재 qF에 들어있는 불만 4방향 이동
            int size = qF.size();
            for(int i = 0; i < size; i++) { 
                Point p = qF.poll();
                for (int d = 0; d < 4; d++) {
                    int nx = p.x + dx[d];
                    int ny = p.y + dy[d];
                    // 배열의 범위를 벗어나면 다음 진행
                    if (nx < 0 || ny < 0 || nx >= R || ny >= C) {
                        continue;
                    }
                    // 벽을 만나거나 이미 불이 있는 곳이면 다음 진행
                    if (map[nx][ny] == '#' || map[nx][ny] == 'F') {
                        continue;
                    }
                    map[nx][ny] = 'F';
                    qF.add(new Point(nx, ny, p.cnt + 1));
                }
            }

            // 지훈이 이동
            // 현재 qF에 들어있는 지훈이만 4방향 이동
            size = qP.size();
            for (int i = 0; i < size; i++) {
                Point p = qP.poll();
                for (int d = 0; d < 4; d++) {
                    int nx = p.x + dx[d];
                    int ny = p.y + dy[d];
                    // 지훈이가 배열의 범위를 벗어난 것은 불을 피해서 도망친 경우이기 때문에 ans에 cnt + 1값을 넣고 true를 반환하며 종료
                    if (nx < 0 || ny < 0 || nx >= R || ny >= C) {
                        ans = p.cnt + 1;
                        return true;
                    }
                    // 벽을 만나거나 이미 불이 있거나 갔던 곳이라면 다음 
                    if (map[nx][ny] == '#' || map[nx][ny] == 'F' || map[nx][ny] == 'J') {
                        continue;
                    }
                    map[nx][ny] = 'J';
                    qP.add(new Point(nx, ny, p.cnt + 1));
                }
            }
        }
        return false;
    }
}
